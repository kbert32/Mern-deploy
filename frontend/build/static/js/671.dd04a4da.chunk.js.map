{"version":3,"file":"static/js/671.dd04a4da.chunk.js","mappings":"oLAKe,SAASA,EAAYC,GAEhC,IAAAC,GAAwBC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAoCL,EAAAA,EAAAA,YAAUM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA8BT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,GAAgBC,EAAAA,EAAAA,UAiCtB,OA/BAC,EAAAA,EAAAA,YAAU,WACN,GAAKZ,EAAL,CAGA,IAAMa,EAAa,IAAIC,WACvBD,EAAWE,OAAS,WAChBV,EAAcQ,EAAWG,OAC7B,EACAH,EAAWI,cAAcjB,EALzB,CAMJ,GAAG,CAACA,KAuBAkB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOC,GAAI3B,EAAM2B,GAAIC,IAAKb,EAAec,MAAO,CAACC,QAAS,QAASC,KAAK,OAAOC,OAAO,oBAAoBC,SAtBlH,SAAuBC,GAEnB,IAAIC,EACAC,EAAcvB,EACdqB,EAAMG,OAAOC,OAAuC,IAA9BJ,EAAMG,OAAOC,MAAMC,QACzCJ,EAAaD,EAAMG,OAAOC,MAAM,GAChChC,EAAQ6B,GACRrB,GAAW,GACXsB,GAAc,IAEdtB,GAAW,GACXsB,GAAc,GAElBpC,EAAMwC,QAAQxC,EAAM2B,GAAIQ,EAAYC,EACxC,KASQb,EAAAA,EAAAA,MAAA,OAAKC,UAAS,gBAAAiB,OAAkBzC,EAAM0C,QAAU,UAAWjB,SAAA,EACvDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,CACjChB,IAAciB,EAAAA,EAAAA,KAAA,OAAKiB,IAAKlC,EAAYmC,IAAI,aACvCnC,IAAciB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8BAEvBC,EAAAA,EAAAA,KAACmB,EAAAA,EAAM,CAACd,KAAK,SAASe,QAZlC,WACI/B,EAAcgC,QAAQC,OAC1B,EAU4DvB,SAAC,mBAEnDZ,IAAWa,EAAAA,EAAAA,KAAA,KAAAD,SAAIzB,EAAMiD,cAGnC,C,4GCpDA,SAASC,EAAaC,EAAOC,GACzB,OAAQA,EAAOrB,MACX,IAAK,SACD,OAAAsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRG,MAAOF,EAAOG,IACd1C,SAAS2C,EAAAA,EAAAA,IAASJ,EAAOG,IAAKH,EAAOK,cAE7C,IAAK,QACD,OAAAJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRO,SAAS,IAEjB,QACI,OAAOP,EAEnB,CAGe,SAASQ,EAAM3D,GAE1B,IAAA4D,GAA+BC,EAAAA,EAAAA,YAAWX,EAAc,CACpDI,MAAOtD,EAAM8D,cAAgB,GAC7BjD,QAASb,EAAM+D,eAAgB,EAC/BL,SAAS,IACXM,GAAA5D,EAAAA,EAAAA,GAAAwD,EAAA,GAJKK,EAAUD,EAAA,GAAEE,EAAQF,EAAA,GAMpBrC,EAAe3B,EAAf2B,GAAIa,EAAWxC,EAAXwC,QACJc,EAAkBW,EAAlBX,MAAOzC,EAAWoD,EAAXpD,QAMd,SAASsD,EAAcjC,GACnBgC,EAAS,CAACnC,KAAM,SAAUwB,IAAKrB,EAAMG,OAAOiB,MAAOG,WAAYzD,EAAMyD,YACzE,CAEA,SAASW,IACLF,EAAS,CAACnC,KAAM,SACpB,EAVAd,EAAAA,EAAAA,YAAU,WACNuB,EAAQb,EAAI2B,EAAOzC,EACvB,GAAG,CAACc,EAAI2B,EAAOzC,EAAS2B,IAUxB,IAAM6B,EAA4B,UAAlBrE,EAAMqE,SAClB3C,EAAAA,EAAAA,KAAA,SACIC,GAAI3B,EAAM2B,GACVI,KAAM/B,EAAM+B,KACZuC,YAAatE,EAAMsE,YACnBrC,SAAUkC,EACVI,OAAQH,EACRd,MAAOW,EAAWX,SAGtB5B,EAAAA,EAAAA,KAAA,YACIC,GAAI3B,EAAM2B,GACV6C,KAAMxE,EAAMwE,MAAQ,EACpBvC,SAAUkC,EACVI,OAAQH,EACRd,MAAOW,EAAWX,QAI1B,OACI/B,EAAAA,EAAAA,MAAA,OAAKC,UAAS,gBAAAiB,QAAmBwB,EAAWpD,SAAWoD,EAAWP,SAAW,yBAA0BjC,SAAA,EACnGC,EAAAA,EAAAA,KAAA,SAAO+C,QAASzE,EAAM2B,GAAGF,SAAEzB,EAAM0E,QAChCL,GACCJ,EAAWpD,SAAWoD,EAAWP,UAAWhC,EAAAA,EAAAA,KAAA,KAAAD,SAAIzB,EAAMiD,cAGpE,C,4EC7DA,EARa,SAAAjD,GACX,OACE0B,EAAAA,EAAAA,KAAA,OAAKF,UAAS,QAAAiB,OAAUzC,EAAMwB,WAAaK,MAAO7B,EAAM6B,MAAMJ,SAC3DzB,EAAMyB,UAGb,C,mGCRMkD,EAAc,SAACxB,EAAOC,GACxB,OAAQA,EAAOrB,MACX,IAAK,eACD,IAAI6C,GAAc,EAClB,IAAK,IAAMC,KAAW1B,EAAM2B,OACnB3B,EAAM2B,OAAOD,KAIdD,EADAC,IAAYzB,EAAOyB,QACLD,GAAexB,EAAOvC,QAEtB+D,GAAezB,EAAM2B,OAAOD,GAAShE,SAG3D,OAAAwC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACR2B,QAAMzB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACCF,EAAM2B,QAAM,IAAAC,EAAAA,EAAAA,GAAA,GACd3B,EAAOyB,QAAU,CAACvB,MAAOF,EAAOE,MAAOzC,QAASuC,EAAOvC,WAE5DA,QAAS+D,IAEjB,IAAK,WACD,MAAO,CACHE,OAAQ1B,EAAO0B,OACfjE,QAASuC,EAAOwB,aAExB,QACI,OAAOzB,EAEnB,EAGO,SAAS6B,EAAQC,EAAeC,GAEnC,IAAAtB,GAA8BC,EAAAA,EAAAA,YAAWc,EAAa,CAClDG,OAAQG,EACRpE,QAASqE,IACXlB,GAAA5D,EAAAA,EAAAA,GAAAwD,EAAA,GAHKuB,EAASnB,EAAA,GAAEE,EAAQF,EAAA,GAiB1B,MAAO,CAACmB,GAZaC,EAAAA,EAAAA,cAAY,SAACzD,EAAI2B,EAAOzC,GACzCqD,EAAS,CAACnC,KAAM,eAAgBuB,MAAOA,EAAOzC,QAASA,EAASgE,QAASlD,GAC7E,GAAG,KAEiByD,EAAAA,EAAAA,cAAY,SAACC,EAAWC,GACxCpB,EAAS,CACLnC,KAAM,WACN+C,OAAQO,EACRT,YAAaU,GAErB,GAAG,IAGP,C,8ICvDMC,EAAyB,UACzBC,EAA2B,YAC3BC,EAA2B,YAG3BC,EAAuB,QAGhBC,EAAoB,WAAH,MAAU,CAAE5D,KAAMwD,EAAwB,EAE3DK,EAAsB,SAAArC,GAAG,MAAK,CACzCxB,KAAMyD,EACNjC,IAAKA,EACN,EAOYsC,EAAkB,WAAH,MAAU,CAAE9D,KAAM2D,EAAsB,EAEvDlC,EAAW,SAACF,EAAOG,GAC9B,IACkCqC,EAD9BjF,GAAU,EAAKkF,GAAAC,EAAAA,EAAAA,GACKvC,GAAU,IAAlC,IAAAsC,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAoC,CAAC,IAA1BC,EAASN,EAAAxC,MACd8C,EAAUrE,OAASwD,IACrB1E,EAAUA,GAAWyC,EAAM+C,OAAO9D,OAAS,GAEzC6D,EAAUrE,OAASyD,IACrB3E,EAAUA,GAAWyC,EAAM+C,OAAO9D,QAAU6D,EAAU7C,KAEpD6C,EAAUrE,OAAS0D,IACrB5E,EAAUA,GAAWyC,EAAM+C,OAAO9D,QAAU6D,EAAU7C,KA7BjC,QA+BnB6C,EAAUrE,OACZlB,EAAUA,IAAYyC,GAAS8C,EAAU7C,KA/BpB,QAiCnB6C,EAAUrE,OACZlB,EAAUA,IAAYyC,GAAS8C,EAAU7C,KAEvC6C,EAAUrE,OAAS2D,IACrB7E,EAAUA,GAAW,iBAAiByF,KAAKhD,GAE/C,CAAC,OAAAiD,GAAAR,EAAAS,EAAAD,EAAA,SAAAR,EAAAU,GAAA,CACD,OAAO5F,CACT,C,uOC7Be,SAAS6F,IAEpB,IAAMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAE3B5G,GAAsCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7C6G,EAAW3G,EAAA,GAAE4G,EAAc5G,EAAA,GAElC6G,GAAoDC,EAAAA,EAAAA,KAA7CC,EAASF,EAATE,UAAWC,EAAKH,EAALG,MAAOC,EAAWJ,EAAXI,YAAaC,EAAUL,EAAVK,WAEtCC,GAA+CtC,EAAAA,EAAAA,GAAQ,CACnDuC,MAAO,CACHjE,MAAO,GACPzC,SAAS,GAEb2G,SAAU,CACNlE,MAAO,GACPzC,SAAS,KAEd,GAAM4G,GAAArH,EAAAA,EAAAA,GAAAkH,EAAA,GATFnC,EAASsC,EAAA,GAAEC,EAAYD,EAAA,GAAEE,EAAWF,EAAA,GAoChB,SAAAG,IA+B1B,OA/B0BA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA3B,SAAAC,EAA4B9F,GAAK,IAAA+F,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEN,GAAvBrG,EAAMsG,kBAEF1B,EAAY,CAADuB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEoBnB,EACvBqB,wCACA,OACAC,KAAKC,UAAU,CAACpB,MAAOpC,EAAUL,OAAOyC,MAAMjE,MAAOkE,SAAUrC,EAAUL,OAAO0C,SAASlE,QACzF,CAAC,eAAgB,qBAAqB,KAAD,EAJnC2E,EAAYI,EAAAO,KAMlBjC,EAAQkC,MAAMZ,EAAaa,OAAQb,EAAac,OAAOV,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,iBAAAA,EAAAE,KAAA,iBAQA,OARAF,EAAAC,KAAA,IAIjDJ,EAAW,IAAIe,UACZC,OAAO,QAAS/D,EAAUL,OAAOyC,MAAMjE,OAChD4E,EAASgB,OAAO,OAAQ/D,EAAUL,OAAOqE,KAAK7F,OAC9C4E,EAASgB,OAAO,WAAY/D,EAAUL,OAAO0C,SAASlE,OACtD4E,EAASgB,OAAO,QAAS/D,EAAUL,OAAOsE,MAAM9F,OAAO+E,EAAAE,KAAA,GAE5BnB,EACvBqB,yCACA,OACAP,GACF,KAAD,GAJKD,EAAYI,EAAAO,KAMlBjC,EAAQkC,MAAMZ,EAAaa,OAAQb,EAAac,OAAOV,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,mCAAAA,EAAAiB,OAAA,GAAAtB,EAAA,2BAGlEuB,MAAA,KAAAC,UAAA,CAED,OACIjI,EAAAA,EAAAA,MAAAkI,EAAAA,SAAA,CAAAhI,SAAA,EACIC,EAAAA,EAAAA,KAACgI,EAAAA,EAAU,CAACvC,MAAOA,EAAOwC,QAAStC,KACnC9F,EAAAA,EAAAA,MAACqI,EAAAA,EAAI,CAACpI,UAAU,iBAAgBC,SAAA,CAC3ByF,IAAaxF,EAAAA,EAAAA,KAACmI,EAAAA,EAAc,CAACC,WAAS,KACvCpI,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,QAAMwI,SA1ChB,SAEyBC,GAAA,OAAApC,EAAA2B,MAAC,KAADC,UAAA,EAwCc/H,SAAA,EACvBqF,IACEpF,EAAAA,EAAAA,KAACiC,EAAAA,EAAK,CACNU,QAAQ,QACR1C,GAAG,OACHI,KAAK,OACL2C,MAAM,YACNjB,WAAY,EAACkC,EAAAA,EAAAA,OACb1C,UAAU,uBACVT,QAASkF,KAGXZ,IAAepF,EAAAA,EAAAA,KAAC3B,EAAAA,EAAW,CAAC2C,QAAM,EAACf,GAAG,QAAQa,QAASkF,EAAczE,UAAU,8BACjFvB,EAAAA,EAAAA,KAACiC,EAAAA,EAAK,CACFhC,GAAG,QACH0C,QAAQ,QACRtC,KAAK,QACL2C,MAAM,QACNjB,WAAY,EAACoC,EAAAA,EAAAA,OACb5C,UAAU,8BACVT,QAASkF,KAEbhG,EAAAA,EAAAA,KAACiC,EAAAA,EAAK,CACFhC,GAAG,WACH0C,QAAQ,QACRtC,KAAK,WACL2C,MAAM,WACNjB,WAAY,EAACmC,EAAAA,EAAAA,IAAoB,IACjC3C,UAAU,yDACVT,QAASkF,KAEbhG,EAAAA,EAAAA,KAACmB,EAAAA,EAAM,CAACd,KAAK,SAASkI,UAAW9E,EAAUtE,QAAQY,SAAEqF,EAAc,QAAU,eAE7EvF,EAAAA,EAAAA,MAACsB,EAAAA,EAAM,CAACqH,SAAO,EAACpH,QAlGhC,WACSgE,EAQDa,GAAWtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACN8B,EAAUL,QAAM,IACnBqE,KAAM,CACF7F,MAAO,GACPzC,SAAS,GAEbuI,MAAO,CACH9F,MAAO,KACPzC,SAAS,MAEd,GAjBH8G,GAAWtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACN8B,EAAUL,QAAM,IACnBqE,UAAMgB,EACNf,WAAOe,IAEXhF,EAAUL,OAAOyC,MAAM1G,SAAWsE,EAAUL,OAAO0C,SAAS3G,SAchEkG,GAAe,SAAAqD,GAAQ,OAAKA,CAAQ,GAExC,EA2E2D3I,SAAA,CAAC,aAAWqF,EAAc,SAAW,gBAIpG,C","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/util/validators.js","user/pages/Auth.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nexport default function ImageUpload(props) {\n\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n\n    const filePickerRef = useRef();     //useRef is used to gain access to the input's .click() method since the input field is = display: \n                                        //Max thinks the default input field is ugly\n    useEffect(() => {\n        if (!file) {\n            return;\n        }\n        const fileReader = new FileReader();        //FileReader is an API that is built into the browser\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    }, [file])\n\n    function pickedHandler(event) {\n\n        let pickedFile;\n        let fileIsValid = isValid;\n        if (event.target.files || event.target.files.length === 1) {\n            pickedFile = event.target.files[0];\n            setFile(pickedFile);\n            setIsValid(true);\n            fileIsValid = true;\n        } else {\n            setIsValid(false);\n            fileIsValid = false;\n        }\n        props.onInput(props.id, pickedFile, fileIsValid);\n    };\n\n    function pickImageHandler() {\n        filePickerRef.current.click();\n    };\n\n    return (\n        <div className='form-control'>\n            <input id={props.id} ref={filePickerRef} style={{display: 'none'}} type='file' accept='.jpg, .png, .jpeg' onChange={pickedHandler} />\n            <div className={`image-upload ${props.center && 'center'}`}>\n                <div className='image-upload__preview'>\n                    {previewUrl && <img src={previewUrl} alt='Preview' />}\n                    {!previewUrl && <p>Please pick an image.</p>}\n                </div>\n                <Button type='button' onClick={pickImageHandler}>Pick Image</Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\n","import { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';           \n\nfunction inputReducer(state, action) {\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                touched: true\n            };\n        default: \n            return state;\n    }\n};\n\n\nexport default function Input(props) {\n\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '', \n        isValid: props.initialValid || false, \n        touched: false\n    });\n\n    const {id, onInput} = props;        //these props are pulled from the objects to avoid infinite loops within \n    const {value, isValid} = inputState;    //useEffect\n\n    useEffect(() => {\n        onInput(id, value, isValid)\n    }, [id, value, isValid, onInput]);\n\n    function changeHandler(event) {\n        dispatch({type: 'CHANGE', val: event.target.value, validators: props.validators});\n    };\n\n    function touchHandler() {\n        dispatch({type: 'TOUCH'});\n    };\n\n    const element = props.element === 'input' ? (\n        <input \n            id={props.id} \n            type={props.type} \n            placeholder={props.placeholder} \n            onChange={changeHandler} \n            onBlur={touchHandler}\n            value={inputState.value} \n        />\n    ) : (\n        <textarea \n            id={props.id} \n            rows={props.rows || 3} \n            onChange={changeHandler} \n            onBlur={touchHandler}\n            value={inputState.value} \n        /> \n    );\n\n    return (\n        <div className={`form-control ${!inputState.isValid && inputState.touched && 'form-control--invalid'}`}>\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.touched && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\n\n//We can also use third party libraries for form functionality such as React 'Formik'","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]) {       //if property is undefined, don't evaluate form validity\n                    continue;\n                }\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {value: action.value, isValid: action.isValid} \n                },\n                isValid: formIsValid\n            };\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\n\nexport function useForm(initialInputs, initialFormValidity) {\n\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id})\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Input from '../../shared/components/FormElements/Input';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './Auth.css';\n\nexport default function Auth() {\n\n    const authCtx = useContext(AuthContext);\n\n    const [isLoginMode, setIsLoginMode] = useState(true);\n\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n    const [formState, inputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    function switchModeHandler() {\n        if (!isLoginMode) {\n            setFormData({\n                ...formState.inputs,\n                name: undefined, \n                image: undefined\n            }, \n            formState.inputs.email.isValid && formState.inputs.password.isValid);\n        } else {\n            setFormData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                },\n                image: {\n                    value: null,\n                    isValid: false\n                }\n            }, false);\n        }\n        setIsLoginMode(prevMode => !prevMode);\n        \n    };\n\n    async function loginHandler(event) {\n\n        event.preventDefault();\n\n        if (isLoginMode) {\n            try {\n                const responseData = await sendRequest(\n                    process.env.REACT_APP_BACKEND_URL + '/api/users/login', \n                    'POST', \n                    JSON.stringify({email: formState.inputs.email.value, password: formState.inputs.password.value}),\n                    {'Content-Type': 'application/json'});\n                                \n                authCtx.login(responseData.userId, responseData.token);\n            } catch(err) {}   \n        } else {\n            try {\n                const formData = new FormData();                                //FormData is an API built into the browser which allows us to send \n                formData.append('email', formState.inputs.email.value);         //binary data\n                formData.append('name', formState.inputs.name.value);\n                formData.append('password', formState.inputs.password.value);\n                formData.append('image', formState.inputs.image.value);\n\n                const responseData = await sendRequest(\n                    process.env.REACT_APP_BACKEND_URL + '/api/users/signup', \n                    'POST', \n                    formData                                                    //with FormData, the fetch API automatically sets up our headers\n                );\n\n                authCtx.login(responseData.userId, responseData.token);\n            } catch (err) {}\n        }       \n    };\n\n    return (\n        <>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card className='authentication'>\n                {isLoading && <LoadingSpinner asOverlay />}\n                <h2>Login Required</h2>\n                <hr />\n                <form onSubmit={loginHandler}>\n                    {!isLoginMode && (\n                        <Input\n                        element='input'\n                        id='name'\n                        type='text'\n                        label='Your name'\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText='Please enter a name.'\n                        onInput={inputHandler}\n                        />\n                        )}\n                    {!isLoginMode && <ImageUpload center id='image' onInput={inputHandler} errorText='Please provide an image.' />}\n                    <Input\n                        id='email'\n                        element='input'\n                        type='email'\n                        label='Email'\n                        validators={[VALIDATOR_EMAIL()]}\n                        errorText='Please enter a valid email.'\n                        onInput={inputHandler}\n                        />\n                    <Input\n                        id='password'\n                        element='input'\n                        type='password'\n                        label='Password'\n                        validators={[VALIDATOR_MINLENGTH(6)]}\n                        errorText='Please enter a valid password (at least 6 characters).'\n                        onInput={inputHandler}\n                        />\n                    <Button type='submit' disabled={!formState.isValid}>{isLoginMode ? 'Login' : 'Signup'}</Button>\n                </form>\n                    <Button inverse onClick={switchModeHandler}>Switch to {isLoginMode ? 'Signup' : 'Login'}</Button>\n            </Card>\n        </>\n    );\n};"],"names":["ImageUpload","props","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","_objectSpread","value","val","validate","validators","touched","Input","_useReducer","useReducer","initialValue","initialValid","_useReducer2","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","formReducer","formIsValid","inputId","inputs","_defineProperty","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","test","err","e","f","Auth","authCtx","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","email","password","_useForm2","inputHandler","setFormData","_loginHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","formData","_responseData","wrap","_context","prev","next","preventDefault","process","JSON","stringify","sent","login","userId","token","t0","FormData","append","name","image","t1","stop","apply","arguments","_Fragment","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","_x","disabled","inverse","undefined","prevMode"],"sourceRoot":""}