{"version":3,"file":"static/js/400.81a254fe.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport {useHttpClient} from '../../shared/hooks/http-hook';\nimport './PlaceForm.css';\n\n\nexport default function UpdatePlace() {\n\n    const authCtx = useContext(AuthContext);\n    \n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const [loadedPlace, setLoadedPlace] = useState();\n    \n    const placeId = useParams().placeId;\n    \n    const [formState, inputHandler, setFormData] = useForm({    //setFormData function is used to initialize the input\n        title: {                //fields once the data is retrieved from the backend.\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        },\n    }, \n    false\n    );\n\n    const navigate = useNavigate();\n    \n    useEffect(() => {\n        async function fetchPlace() {\n            try {\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `/api/places/${placeId}`);\n                setLoadedPlace(responseData.place);\n                setFormData({\n                    title: {\n                        value: responseData.title,\n                        isValid: true\n                    },\n                    description: {\n                        value: responseData.description,\n                        isValid: true\n                    },\n                }, true);\n            } catch (err) {};\n        };\n        fetchPlace();\n    }, [sendRequest, placeId, setFormData]);\n    \n    async function placeUpdateSubmitHandler(event) {\n        event.preventDefault();\n        try {\n            await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + `/api/places/${placeId}`,\n                'PATCH',\n                JSON.stringify({\n                    title: formState.inputs.title.value,\n                    description: formState.inputs.description.value,\n                }),\n                {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + authCtx.token\n                },\n            );\n            navigate('/' + authCtx.userId + '/places');\n        } catch (err) {};\n    };\n\n    if (isLoading) {\n        return (\n            <div className=\"center\">\n                <LoadingSpinner asOverlay />\n            </div>\n        );\n    }\n    \n    if (!loadedPlace && !error) {\n        return (\n            <div className=\"center\">\n                <Card>\n                    <h2>Could not find place!</h2>\n                </Card>\n            </div>\n        );\n    }\n    \n    \n    return (\n        <>\n            <ErrorModal error={error} onClear={clearError} />\n            {!isLoading && loadedPlace && (\n            <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n            <Input\n                    id='title'\n                    element='input'\n                    type='text'\n                    label='Title'\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText='Please enter a valid title.'\n                    onInput={inputHandler}\n                    initialValue={loadedPlace.title}\n                    initialValid={true}\n                    /> \n            <Input\n                    id='description'\n                    element='textarea'\n                    label='Description'\n                    validators={[VALIDATOR_MINLENGTH(5)]}\n                    errorText='Please enter a valid description (at least 5 characters).'\n                    onInput={inputHandler}\n                    initialValue={loadedPlace.description}\n                    initialValid={true}\n                    /> \n                <Button type='submit' disabled={!formState.isValid}>\n                    UPDATE PLACE\n                </Button>\n            </form>)}\n        </>\n    );\n};\n\n\n\n// const DUMMY_PLACES = [\n//     {\n//         id: 'p1',\n//         title: 'Eiffel Tower',\n//         description: 'The famous tower in Paris!',\n//         imageUrl: 'https://www.planetware.com/wpimages/2020/02/france-in-pictures-beautiful-places-to-photograph-eiffel-tower.jpg',\n//         address: 'Champ de Mars, 5 Av. Anatole France, 75007 Paris, France',\n//         location: {\n//             lat: 48.8584,\n//             lng: 2.2945\n//         },\n//         creator: 'u1' \n//     },\n//     {\n//         id: 'p2',\n//         title: 'Delicate Arch',\n//         description: \"Utah's Delicate Arch!\",\n//         imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/Delicate_arch_sunset.jpg/1280px-Delicate_arch_sunset.jpg',\n//         address: 'Arches National Park, Moab, Utah, USA',\n//         location: {\n//             // lat: 38.743600,\n//             // lng: -109.499300\n//             lat: 38.7436,\n//             lng: -109.4993\n//         },\n//         creator: 'u2'\n//     }\n// ];","import { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';           \n\nfunction inputReducer(state, action) {\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                touched: true\n            };\n        default: \n            return state;\n    }\n};\n\n\nexport default function Input(props) {\n\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '', \n        isValid: props.initialValid || false, \n        touched: false\n    });\n\n    const {id, onInput} = props;        //these props are pulled from the objects to avoid infinite loops within \n    const {value, isValid} = inputState;    //useEffect\n\n    useEffect(() => {\n        onInput(id, value, isValid)\n    }, [id, value, isValid, onInput]);\n\n    function changeHandler(event) {\n        dispatch({type: 'CHANGE', val: event.target.value, validators: props.validators});\n    };\n\n    function touchHandler() {\n        dispatch({type: 'TOUCH'});\n    };\n\n    const element = props.element === 'input' ? (\n        <input \n            id={props.id} \n            type={props.type} \n            placeholder={props.placeholder} \n            onChange={changeHandler} \n            onBlur={touchHandler}\n            value={inputState.value} \n        />\n    ) : (\n        <textarea \n            id={props.id} \n            rows={props.rows || 3} \n            onChange={changeHandler} \n            onBlur={touchHandler}\n            value={inputState.value} \n        /> \n    );\n\n    return (\n        <div className={`form-control ${!inputState.isValid && inputState.touched && 'form-control--invalid'}`}>\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.touched && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\n\n//We can also use third party libraries for form functionality such as React 'Formik'","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]) {       //if property is undefined, don't evaluate form validity\n                    continue;\n                }\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {value: action.value, isValid: action.isValid} \n                },\n                isValid: formIsValid\n            };\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\n\nexport function useForm(initialInputs, initialFormValidity) {\n\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id})\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"],"names":["UpdatePlace","authCtx","useContext","AuthContext","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useState","useState","_useState2","_slicedToArray","loadedPlace","setLoadedPlace","placeId","useParams","_useForm","useForm","title","value","isValid","description","_useForm2","formState","inputHandler","setFormData","navigate","useNavigate","_placeUpdateSubmitHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","event","wrap","_context2","prev","next","preventDefault","process","concat","JSON","stringify","inputs","Authorization","token","userId","t0","stop","apply","arguments","useEffect","_fetchPlace","_callee","responseData","_context","sent","place","fetchPlace","_jsx","className","children","LoadingSpinner","asOverlay","_jsxs","_Fragment","ErrorModal","onClear","onSubmit","_x","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","disabled","Card","inputReducer","state","action","_objectSpread","val","validate","touched","props","_useReducer","useReducer","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","style","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","e","f"],"sourceRoot":""}